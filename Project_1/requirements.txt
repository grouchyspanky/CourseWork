requirments
*
 Your program must be highly modularized. Your main function should consist of a asking the user if they want 
to play then calling a module to play the game if they answer yes and exiting if they do not.

Write a function named, "turn", that contains a switch statement that calls a function based on the computer's 
random choice. This function should accept as input, the user's choice (in the form of a character).

 E.g., if the computer chose Rock, call a function called "rock" and pass in as an argument the player's 
choice.

 The function called, "rock", should determine who the winner was, print the proper rule and print if the 
user won, lost, or it was a draw. An example is: if the computer chose "rock" and the user chose "Spock" 
then the function rock is called with k as an argument and should print "Spock vaporizes rock", then
print, "You win!".

 Write five functions (called rock, paper, scissors, lizard, and spock) as described above that take as input the
user's choice (a character). It then prints the rule that applies, and whether the user won, lost, or there was a 
draw.

 Write a function called getRandomChoice that takes no input (has no parameters) and returns a random number 
between 1 and 5 inclusive. This number represents the computer's choice of rock, paper, scissor, lizard, Spock
respectively.

 Be sure to validate user-input. If the user enters an invalid choice, then you should inform the user that it is
invalid and prompt again. 

 You must implement and use the control structures and functions listed above but you can also implement any 
others that you might find useful (i.e., you might want to write a function that validates user input (takes the 
input as an argument and returns true or false if the input is valid or not).

 All user input will be in the form of a character. The user should be allowed to enter the uppercase and 
lowercase form of the character.

 You must perform input validation. If the user enters an option other than those allowed, display "bad option" 
and prompt again. This must be done for any prompt.

 At the end of a turn, you will ask the user if they want to play again. If they answer yes, then restart the game by 
printing the menu of options, if no, exit the game. The initial greeting should not print again.

 Call the program "rpsls_game.cpp"






















output:
would you like to play Rock-Paper-Scissors-Lizard-Spock? (y/n): Y
 (R)ock
 (P)aper
 (S)cissors
 (L)izard
 Spoc(k)
Enter the letter of your choice: K
You chose Spock the computer chose Lizard
Lizard Poisons Spock
You lose!
Play again? (y/n): Y
(R)ock
 (P)aper
 (S)cissors
 (L)izard
 Spoc(k)
Enter the letter of your choice: 
